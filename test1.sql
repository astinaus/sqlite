SELECT * 
FROM EMPLOYEES
ORDER BY SALARY DESC ,HIRE_DATE ASC ;


SELECT DISTINCT JOB_ID 
FROM EMPLOYEES e ; 

SELECT EMAIL || '@test.com'
FROM EMPLOYEES e ;

SELECT FIRST_NAME , SALARY , SALARY / 10 보너스 , SALARY + 500 인상
FROM EMPLOYEES e ;

SELECT *
FROM EMPLOYEES e 
WHERE SALARY BETWEEN 5000 AND 10000 ;


SELECT *
FROM EMPLOYEES e 
WHERE FIRST_NAME < 'e';

SELECT *
FROM EMPLOYEES e
WHERE EMPLOYEE_ID in (100, 101);

SELECT *
FROM EMPLOYEES e
WHERE COMMISSION_PCT IS NOT NULL ;

SELECT *
FROM EMPLOYEES e 
WHERE JOB_ID LIKE 'AD___' AND FIRST_NAME LIKE 'ne%';

SELECT UPPER(FIRST_NAME) 
FROM EMPLOYEES e ;

SELECT JOB_ID ,SUBSTRING(JOB_ID,1,2) 
FROM EMPLOYEES e ;

SELECT JOB_ID , REPLACE (JOB_ID, '_', '__') 
FROM EMPLOYEES e ;

SELECT FIRST_NAME , SUBSTRING(PHONE_NUMBER,1,8) || '****' 
FROM EMPLOYEES e ;

SELECT SALARY , SALARY / 30 일급 , ROUND(SALARY / 30 , 1), ROUND(SALARY / 30 , -1)
FROM EMPLOYEES e ;

SELECT SALARY , CAST (salary AS int)
FROM EMPLOYEES e ;

SELECT IFNULL(MANAGER_ID, 1)
FROM DEPARTMENTS d ;


SELECT EMPLOYEE_ID, FIRST_NAME, LAST_NAME, SALARY,
	CASE
		WHEN salary >= 9000 THEN '상위급여'
		WHEN salary BETWEEN 6000 AND 8999 THEN '중위급여'
		ELSE '하위급여'
	END AS 급여등급
FROM  EMPLOYEES e 
WHERE JOB_ID = 'IT_PROG';

SELECT FIRST_NAME ,
	CASE JOB_ID 
		when 'AD_PRES' then '대장'
		else '기타'
	END as '1'
FROM EMPLOYEES e; 

SELECT SUM(SALARY) 총급여 , AVG(SALARY) 평균급여, MAX(SALARY) 최고급여 , MIN(SALARY) 최저급여 
FROM EMPLOYEES e ;

SELECT JOB_ID , SUM(SALARY) AS 총급여
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID >= 10
GROUP BY JOB_ID
ORDER BY 총급여 desc;

SELECT JOB_ID , SUM(SALARY) AS 총급여
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID >= 10
GROUP BY JOB_ID
HAVING SUM(SALARY) > 40000 
ORDER BY 총급여 desc;

SELECT e.FIRST_NAME , e.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM EMPLOYEES e , DEPARTMENTS d 
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID ;

SELECT e.FIRST_NAME , e.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM EMPLOYEES e 
JOIN DEPARTMENTS d ON e.EMPLOYEE_ID = d.DEPARTMENT_ID ;

SELECT e.FIRST_NAME , e.DEPARTMENT_ID , d.DEPARTMENT_NAME 
FROM EMPLOYEES e 
LEFT OUTER JOIN DEPARTMENTS d ON e.EMPLOYEE_ID = d.DEPARTMENT_ID ;

SELECT e.EMPLOYEE_ID  , e.FIRST_NAME , e2.EMPLOYEE_ID 매니저ID , e2.FIRST_NAME '매니저 이름'
FROM EMPLOYEES e 
JOIN EMPLOYEES e2 ON e.MANAGER_ID = e2.EMPLOYEE_ID ;

SELECT DEPARTMENT_ID 
FROM EMPLOYEES e 
UNION
SELECT DEPARTMENT_ID 
FROM EMPLOYEES e ;


SELECT *
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID = 100;

SELECT EMPLOYEE_ID 
FROM EMPLOYEES e ;

SELECT EMPLOYEE_ID 
FROM EMPLOYEES e 
WHERE EMPLOYEE_ID = 100;

SELECT *
FROM EMPLOYEES e 
WHERE e.SALARY IN (
					SELECT SALARY
					FROM EMPLOYEES e2 
					WHERE LAST_NAME = 'De Haan'
				);


SELECT *
FROM employees A
WHERE A.salary IN (
                  SELECT salary
                  FROM employees
                  WHERE last_name = 'King'
                  );
                 
SELECT *
FROM EMPLOYEES e 
WHERE (e.JOB_ID, e.SALARY) IN (
								SELECT JOB_ID , MIN(SALARY) 그룹별급여
								FROM EMPLOYEES e2 
								GROUP BY JOB_ID 
								)
ORDER BY e.SALARY DESC ;


SELECT DEPARTMENT_ID 
FROM DEPARTMENTS d 
WHERE DEPARTMENT_NAME = 'IT' as B;


SELECT *
FROM EMPLOYEES e , (
					SELECT DEPARTMENT_ID 
					FROM DEPARTMENTS d 
					WHERE DEPARTMENT_NAME = 'IT'
					) AS d
WHERE e.DEPARTMENT_ID = d.DEPARTMENT_ID;

SELECT *
FROM (
		SELECT *
		FROM EMPLOYEES e 
		WHERE salary > 6000
		);
	
SELECT *
FROM (
		SELECT first_name, salary, RANK() OVER(ORDER BY salary desc) 순위
		FROM EMPLOYEES e 
		WHERE salary > 6000
		)
WHERE 순위 < 6;


SELECT *
FROM REGIONS r ;

INSERT INTO REGIONS values(5, 'South America');

INSERT INTO REGIONS (region_id) values(6);

INSERT INTO REGIONS (region_name) values('China');

UPDATE REGIONS SET REGION_NAME = 'Jeju' WHERE REGION_ID = 6;

DELETE FROM REGIONS WHERE REGION_ID = 7;

